on: 
  push:
    branches:
      - production
  workflow_dispatch:

name: Main Pipeline

env:
  ECR_REPOSITORY_MAIN         : main-nftmoments
  ECS_CLUSTER                 : nftmoments-main
  ECS_CONTAINER_MAIN          : backend-main
  ECS_SERVICE_MAIN            : backend-main-service



jobs:
  build_backend_and_frontend:
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:  eu-central-1

    - name: Get .env from Secret Manager
      run: |
        aws secretsmanager get-secret-value --secret-id env/main --query SecretString --output text >> backend/.env

    - uses: actions/cache@v3
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - uses: actions/setup-node@v2
      with:
        node-version: '16.x'
    - name: Build frontend
      run: |
       cd frontend && npm install && npm run build

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/.buildx-cache
         # Key is named differently to avoid collision
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx

    - name: Build image
      uses: docker/build-push-action@v3
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_MAIN }}
        IMAGE_TAG: ${{ github.sha }}
      with:
        context: .
        builder: ${{ steps.buildx.outputs.name }}
        file: Dockerfile
        push: true
        tags: |
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_MAIN }}:${{ github.sha }}
          ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY_MAIN }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        # Note the mode=max here
        # More: https://github.com/moby/buildkit#--export-cache-options
        # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
        cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new  
    - name: Move cache
      # Temp fix
      # https://github.com/docker/build-push-action/issues/252
       # https://github.com/moby/buildkit/issues/1896
      run: |
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache


  deploy_backend:
    needs: [build_backend_and_frontend]
    if: |
      !failure() && !cancelled()
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:  eu-central-1
        mask-aws-account-id: false

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Download task definition
      id: download-task-backend
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_MAIN }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws ecs describe-task-definition --task-definition  ${{ env.ECS_CONTAINER_MAIN }} --query taskDefinition > task-definition.json
        echo "::set-output name=revision::$(cat task-definition.json | jq .revision)"
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.ECS_CONTAINER_MAIN }}
        image: ${{ steps.download-task-backend.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_MAIN }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Deregister previous revision
      run: |
        aws ecs deregister-task-definition --task-definition ${{ env.ECS_CONTAINER_MAIN }}:${{ steps.download-task-backend.outputs.revision }} >> /dev/null
